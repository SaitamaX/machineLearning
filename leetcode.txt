/**********************************************************leetcode经典题**********************************************************/
1.给定两个大小为m和n的有序数组nums1 和 nums2
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为O(log(m+n))。
nums1和nums2不同时为空。
示例 1:
nums1 = [1,3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5
//参考思想：https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/4-xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-shu/
static int a=[](){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}();
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), m = nums2.size();
        if (m < n){
            return findMedianSortedArrays(nums2, nums1);
        }
        if (n == 0){
            return m%2==0 ? (nums2[m/2] + nums2[m/2-1])/2.0 : nums2[m/2];
        }
        int cut_1 = n;
        int cut_2 = m+n - cut_1;
        int Lmax_1 = nums1[(cut_1 - 1)/2], Rmin_1 = nums1[cut_1/2];
        int Lmax_2 = nums2[(cut_2 - 1)/2], Rmin_2 = nums2[cut_2/2];
        while(Lmax_1 > Rmin_2 || Lmax_2 > Rmin_1){
            if(Lmax_1 > Rmin_2)
                cut_1--;
            if(Lmax_2 > Rmin_1)
                cut_1++;
            cut_2 = m+n - cut_1;
            Lmax_1 = cut_1 == 0 ? INT_MIN : nums1[(cut_1 - 1)/2];
            Rmin_1 = cut_1 == 2*n ? INT_MAX : nums1[cut_1/2];
            Lmax_2 = cut_2 == 0 ? INT_MIN : nums2[(cut_2 - 1)/2];
            Rmin_2 = cut_2 == 2*m ? INT_MAX : nums2[cut_2/2];
        }
        return (max(Lmax_1, Lmax_2) + min(Rmin_1, Rmin_2))/2.0;
    }
};
//test github
